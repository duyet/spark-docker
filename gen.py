import os
import sys
import jinja2


def scan_images():
    """
    Scan a project for all the files and directories.
    """
    current_dir = os.getcwd()
    projects = {}

    # Scan the image_name is the directory in top level
    # The image_tag is the directory in the image_name directory
    for image_name in os.listdir(current_dir):
        if os.path.isdir(image_name):
            projects[image_name] = []
            for image_tag in os.listdir(image_name):
                check = os.path.join(image_name, image_tag, 'Dockerfile')
                if os.path.isfile(check):
                    projects[image_name].append(image_tag)

    # Filter out the empty image_tags
    projects = {k: v for k, v in projects.items() if v}

    return projects


def get_template():
    """ jinja2 template for Github workflows from string """

    template = """# Generated by gen.py script
# Do not edit this file manually

name: Build and Push
on:
  push:
    branches:
      - master
jobs:
{%- for image_name, image_tags in images.items() %}
  {{ image_name }}:
    name: Build {{ image_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags:
          {%- for image_tag in image_tags %}
          - {{ image_tag }}
          {%- endfor %}
    env:
      IMAGE_NAME: {{ image_name }}
      IMAGE_TAG: '{% raw %}{{ matrix.tags }}{% endraw %}'
    {%- raw %}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
             src:
              - '${{ env.IMAGE_NAME }}/${{ matrix.tags }}/**'

      - name: Login to Docker Hub
        if: steps.changes.outputs.src == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        if: steps.changes.outputs.src == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}
          file: ./${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          push: true

      - name: Image digest
        if: steps.changes.outputs.src == 'true'
        run: echo ${{ steps.docker_build.outputs.digest }}
    {%- endraw %}
{% endfor -%}
    """

    return template


def build_workflows(images):
    """ Build the workflows yaml for the images. """

    # Get the jinja2 template
    template = jinja2.Template(get_template())

    # Build the workflows
    workflows = template.render(images=images)

    return workflows


if __name__ == "__main__":
    images = scan_images()
    workflows = build_workflows(images)

    # Dry run option
    if '--dry-run' in sys.argv:
        print(workflows)

    # Help option
    if '--help' in sys.argv or '-h' in sys.argv:
        print("Usage:\n  gen.py [--dry-run | --help]")
        sys.exit(0)

    # Write the workflows to the github workflows directory
    target = ".github/workflows/ci.yaml"
    with open(target, 'w') as f:
        f.write(workflows)
        print("Generated workflows to {}".format(target))
